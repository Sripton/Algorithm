// Задача найти все возможные перестановки элементов в массиве рекурсивно javascript 
// Для получения всех возможных перестановок элементов в массиве вы можете использовать рекурсивный алгоритм. 
// Основная идея заключается в том, чтобы сначала выбрать каждый элемент массива по очереди в качестве первого элемента,
//  а затем рекурсивно генерировать все перестановки для остальной части массива.

// Вот функция, которая реализует эту идею:

function getAllPermutations(array) {
    // базовый случай: если массив пуст или содержит только один элемент,
    // то единственной возможной перестановкой является сам массив
    if (array.length <= 1) {
        return [array];
    }

    let result = []; // хранит все перестановки

    // для каждого элемента в массиве
    for (let i = 0; i < array.length; i++) {
        // сформировать подмассив без текущего элемента
        const rest = array.slice(0, i).concat(array.slice(i + 1));

        // рекурсивно генерировать все перестановки для остальной части массива
        for (let perm of getAllPermutations(rest)) {
            result.push([array[i]].concat(perm));
        }
    }

    return result;
}
// пример использования
let arr = [1, 2, 3];
let arr2 = ['A', 'B','C'];
console.log(getAllPermutations(arr2));
// выводит [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]


// Обратите внимание, что количество перестановок массива из n элементов равно n! (факториал n), 
// поэтому функция getAllPermutations может быть очень ресурсоемкой для больших массивов.